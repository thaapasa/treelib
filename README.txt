TreeLib
=============================================================================
Tree Library is a Java library of database index structure implementations.
These are various tree structures, hence the name. Implemented structures
include:

- B-tree (a B+-tree, so data resides only in leaf pages)
- R*-tree
- J-tree (Ibrahim Jaluta's tree for multidimensional data)
- Packed J-tree (PJ-tree)
- Hilbert R-tree (H-tree)
- Multiversion B-tree (MVBT)
- Transactional multiversion B-tree (TMVBT)
- Concurrent multiversion B-tree (CMVBT)
- Time-split B-tree (three variants)

This project requires the General Utils library (also by Tuukka Haapasalo).
Only the general-utils.jar file is needed, and it is located in the lib
directory; but if you need to browse the sources it is good to have the
General Utils sources also handy.

This library has been written by Tuukka Haapasalo in 2008-2010. 


Contents:
-----------------------------------------------------------------------------
1. Directory layout
2. Building the library
-----------------------------------------------------------------------------



1. Directory layout
=============================================================================
This project uses the source directory layout suggested by the Maven build 
tool for Java, that is:   

- The sources can be found at src/main/java
- Resource files are in src/main/resources
- Test files are under src/test/java
- Compiled classes go to target/classes

When running programs, target/classes must be in classpath. The build
process copies the resource files there also so that they can be found
when running the programs.


All directories
-----------------------------------------------------------------------------

build/  
  This directory contains the Ant build scripts used to run the library
  and various tests.

db/
  The database indexes are created in this directory. An example for the 
  CMVBT database: the database type name is "cmvbt", and the library
  expects the database file to be db/cmvbt-exec.db (this is set in the
  CMVBT configuration file src/main/resources/exec-cmvbt.xml). 
  The test running system (explained in more detail later on) works so that
  it first creates the test situation by running some transactions, thus
  creating the file cmvbt-exec.db. This is then copied to a file that stores
  that situation, for example cmvbt-exec.db.initial. Whenever a test is
  run that requires the "initial" state, the file cmvbt-exec.db.initial is
  copied over the cmvbt-exec.db file, and the test is run.
  
doc/
  Some documentation, althought this is not very up-to-date. Check the
  documentation doc/specs/treelib-general.doc for some general information.

lib/
  JAR libraries required to run TreeLib.

material/
  Material files for running tests.
material/archive/
  Archive for old material files.
material/txlogs/
  Old transaction logs used to run some tests.
material/workloads/
  The tests created by the new test running system are placed in this 
  directory. If you wish to backup a generated test, copy the files from
  here and backup them somewhere. The test system checks to see if the file
  is present in this directory; if not, it creates a new one based on the
  rules specified for the test (more on this later on).
  
results/ 
  Test results are placed here.
results/archive/
  Archive for old files
results/cmvbt-perf/
  Test results for the old, manually run CMVBT performance tests were
  placed here. The new test runner does not use this directory any more.
results/db/
  The test result JavaDB database is created in this directory. More on 
  this later on.
results/graph/
  Graphs are created in this directory. Graphs are generated by the 
  GraphCreator class from the General Utils library.
results/summary/
  I have placed some old summary images here.
results/test-results.sql
  The test runner creates this file. It contains the test results as 
  SQL insert statements. The idea is to load these SQL statements into
  a JavaDB database (there are scripts for doing this), and then you can
  generate graphs by loading the required data from the database (by 
  specififying SQL queries in an XML configuration file). This is 
  explained in detail later on. The test runner appends new test results
  into this file, so you should copy the file somewhere safe whenever you
  have run a test set.

src/
  Sources for the library
src/ide/
  Files for IDE: Currently only Eclipse configuration files. 
src/main/
  Main source files.
src/main/datasets/
  This is an old directory with some examples.
src/test/
  Sources for unit tests and some old test-running scripts. New tests are
  run with a new test runner that is not located here.

target/
  Build target directory.
target/classes/
  Java classes are built here, and the resources are also copied here.
  This directory is in classpath when running the various programs.



2. Building the library
=============================================================================
The general Ant build file build/build.xml specifies a "build" target that
can be used to build the project, but I recommend using Eclipse and 
auto-build - that's the fastest way. Just have src/main/java, src/test/java, 
and src/main/resources on your classpath, set target/classes as the output
directory, and building should work fine. Oh yes, also add the JARs in lib
directory to your build path.

A common problem when editing the configuration files in src/main/resources
is that when running the programs, the files are located from target/classes,
and not in src/main/resources. The Ant build target copies the files from
src/main/resources to target/classes, and so does Eclipse if 
src/main/resources is in classpath (and auto-building is on or you build
the project in Eclipse), but if you do not use Eclipse and forget to use 
the Ant build script, you may end up running the programs with the old 
configuration files.



2. Running the programs
=============================================================================





